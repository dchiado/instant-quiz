Resources:
  # RDS Instance
  QuizDatabase:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: False
      AutoMinorVersionUpgrade: True
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: quiz-database
      DBName: trivia
      EnablePerformanceInsights: False
      Engine: postgres
      ManageMasterUserPassword: True
      MasterUsername: postgres
      MaxAllocatedStorage: 20
      MultiAZ: False
      Port: 5432
      PubliclyAccessible: True
      StorageType: gp2
    
  ###################
  ### API Gateway ###
  ###################

  # HTTP API
  QuizApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      CorsConfiguration: 
        AllowCredentials: False
        AllowHeaders: 
          - content-type
        AllowMethods: 
          - GET
          - PATCH
          - POST
          - DELETE
        AllowOrigins: 
          - '*'
        MaxAge: 0
      Description: HTTP API to call Instant Quiz lambda functions
      Name: Instant Quiz
      ProtocolType: HTTP

  # API Gateway stage
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      ApiId: !Ref QuizApiGateway
      AutoDeploy: True
      Description: Default stage for quiz API Gateway
      StageName: $default

  # GET /categories API route
  GetCategoriesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref QuizApiGateway
      AuthorizationType: NONE
      OperationName: GET
      RouteKey: GET /categories
      Target: !Join
        - /
        - - integrations
          - !Ref GetCategoriesIntegration

  # GET /categories API Gateway lambda integration
  GetCategoriesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref QuizApiGateway
      Description: Integration with getCategories lambda
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:216835676480:function:getCategories/invocations'
      PayloadFormatVersion: "2.0"

  # Lambda Invoke permission for getCategories
  GetCategoriesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: getCategories
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  # GET /questions API route
  GetQuestionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref QuizApiGateway
      AuthorizationType: NONE
      OperationName: GET
      RouteKey: GET /questions
      Target: !Join
        - /
        - - integrations
          - !Ref GetQuestionsIntegration

  # GET /questions API Gateway lambda integration
  GetQuestionsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref QuizApiGateway
      Description: Integration with getQuestions lambda
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:216835676480:function:getQuestions/invocations'
      PayloadFormatVersion: "2.0"

  # Lambda Invoke permission for getQuestions
  GetQuestionsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: getQuestions
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  # GET /quiz API route
  GetQuizRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref QuizApiGateway
      AuthorizationType: NONE
      OperationName: GET
      RouteKey: GET /quiz
      Target: !Join
        - /
        - - integrations
          - !Ref GetQuizIntegration

  # GET /quiz API Gateway lambda integration
  GetQuizIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref QuizApiGateway
      Description: Integration with createQuiz lambda
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:216835676480:function:createQuiz/invocations'
      PayloadFormatVersion: "2.0"

  # Lambda Invoke permission for createQuiz
  GetQuizLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: createQuiz
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com


  # # s3 bucket to store downloadable quizzes
  # DownloadBucket:
  #   Type: AWS::S3::Bucket
  #   Properties: 
  #     BucketEncryption: 
  #       ServerSideEncryptionConfiguration: 
  #       - ServerSideEncryptionByDefault:
  #           SSEAlgorithm: AES256
  #     BucketName: 'instant-quiz-download'
  #     PublicAccessBlockConfiguration: 
  #         BlockPublicAcls: True
  #         BlockPublicPolicy: True
  #         IgnorePublicAcls: True
  #         RestrictPublicBuckets: True
  #     VersioningConfiguration: 
  #       Status: Enabled
  #   DeletionPolicy: Delete

  # # download bucket policy
  # DownloadBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties: 
  #     Bucket: !Ref DownloadBucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Action:
  #             - 's3:AbortMultipartUpload'
  #             - 's3:GetObject'
  #             - 's3:GetObjectVersion'
  #             - 's3:PutObject'
  #           Effect: Allow
  #           Resource: !Join
  #             - ''
  #             - - 'arn:aws:s3:::'
  #               - !Ref DownloadBucket
  #               - /*
  #           # TODO needs to be dynamic
  #           Principal: 'arn:aws:iam::216835676480:role/service-role/getQuestions-role-1g8vur7n'

  # # TODO: lifecycle rule for download bucket

  # # s3 bucket for uploading questions
  # UploadBucket:
  #   Type: AWS::S3::Bucket
  #   Properties: 
  #     BucketEncryption: 
  #       ServerSideEncryptionConfiguration: 
  #       - ServerSideEncryptionByDefault:
  #           SSEAlgorithm: AES256
  #     BucketName: 'instant-quiz-upload'
  #     PublicAccessBlockConfiguration: 
  #         BlockPublicAcls: True
  #         BlockPublicPolicy: True
  #         IgnorePublicAcls: True
  #         RestrictPublicBuckets: True
  #     VersioningConfiguration: 
  #       Status: Enabled
  #   DeletionPolicy: Delete

  # # upload bucket policy
  # UploadBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties: 
  #     Bucket: !Ref UploadBucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Action:
  #             - 's3:GetObject'
  #           Effect: Allow
  #           Resource: !Join
  #             - ''
  #             - - 'arn:aws:s3:::'
  #               - !Ref UploadBucket
  #               - /*
  #           # TODO needs to be dynamic
  #           Principal: 'arn:aws:iam::216835676480:role/service-role/loadData-role-3rqtsv62'

